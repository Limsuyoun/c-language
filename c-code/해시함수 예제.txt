#define  _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h> // malloc()
#include <string.h> // strcmp()

#define SIZE 30 // 세미콜른 없음. 배열의 인덱스는 30을 넘지 않도록 한다

// 구조체 선언
typedef struct {
	int num;
	char name[16];
	char phone[16];
}User;

// 구조체 인스턴스 생성
User* createUser(int num, char* name, char* phone) {
	// 아래의 pUser 지역변수는 이 함수가 종료되면 해제되더라도 
	// malloc()을 이용하여 할당된 메모리는 명시적으로 free() 
	// 함수를 사용해야만 해제된다
	User* pUser = (User*)malloc(sizeof(User));
	pUser->num = num;
	strcpy(pUser->name, name);
	strcpy(pUser->phone, phone);
	return pUser;
}

int hashcode(int key) {
	return key % SIZE;
}

// 구조체 배열 선언(전역변수, Global Variable)
User* users[SIZE];

// 구조체 배열 안에서 이름으로 순차검색
User* findUser(char* name, int size) {
	printf("\n 이름(%s)으로 검색결과 =========================== \n", name);
	for (int i = 0; i < size; i++) {
		if (strcmp(users[i]->name, name) == 0) {
			printf("name:%s\n", users[i]->name);
			return users[i];
		}
	}
	printf("검색실패! \n");
	return NULL;
}

// 해시테이블 검색(찾으면 해당 값을 리턴하고 아니면 NULL을 리턴)
User* get(int num) {
	int key = num;
	do {
		//번호를 해싱하여 배열 인덱스를 구하고 배열의 원소를 추출한다
		int idx = hashcode(key);
		User* u = users[idx];
		//해당 인덱스 위치에 저장된 값이 NULL이면 NULL을 리턴한다
		if (u == NULL) return NULL;
		else {// 해당 인덱스에 저장된 num이 파라미터로 전달된 num과 동일하면 검색완료
			if (u->num == num) return u;
		}
		//해당 인덱스 위치에 다른 값이 있을 경우에는 그 다음 인덱스로 이동하여 검색
		key++;
	} while (1);
}

// 구조체 인스턴스 내용 출력
void printUser(User* user) {
	printf("\n 사용자(%s) 정보 =========================== \n", user->name);
	printf("번호:%d \t 이름:%s \t 전화:%s \n",
		user->num, user->name, user->phone);
}

// Hashtable에 추가
void insert(User* u) {
	int key = u->num;
	int idx = 0;
	do {
		idx = hashcode(key);
		if (users[idx] == NULL) {
			users[idx] = u;
			break;
		}
		// 이미 저장된 아이템이라면 기존 아이템을 삭제하고 새로 저장한다
		else if (users[idx]->num == u->num) {
			free(users[idx]);
			users[idx] = u;
			break;
		}
		key++;
	} while (1);
}


// 해시테이블에서 삭제(get()함수에서 일부만 변경하여 작성함)
unsigned char delete_User(int num) {
	int key = num;
	do {
		//번호를 해싱하여 배열 인덱스를 구하고 배열의 원소를 추출한다
		int idx = hashcode(key);
		User* u = users[idx];
		//해당 인덱스 위치에 저장된 값이 NULL이면 0을 리턴한다
		if (u == NULL) return 0;
		else {// 해당 인덱스에 저장된 num이 파라미터로 전달된 num과 동일하면 삭제하고 1 리턴
			if (u->num == num) {
				free((void*)u);
				users[idx] = NULL;
				return 1;
			}
		}
		//해당 인덱스 위치에 다른 값이 있을 경우에는 그 다음 인덱스로 이동하여 검색
		key++;
	} while (1);
}

void printUserList() {
	printf("\n 전체 사용자 리스트 =========================== \n");
	for (int i = 0; i < SIZE; i++) {
		User* u = users[i];
		if (u == NULL) continue;
		printf("%d \t %d \t %s \t %s \n", i, u->num, u->name, u->phone);
	}
}

int main()
{
	printf("Hashtable 1, 구조체 배열및 검색 \n");

	//구조체를 생성하여 해시테이블에 저장한다
	User* pu = createUser(10, "홍길동", "010-9786-1976");

	insert(pu);
	insert(createUser(11, "문재인", "010-9513-7891"));
	insert(createUser(25, "안철수", "010-2798-7895"));
	insert(createUser(37, "홍준표", "010-7852-9193"));
	insert(createUser(44, "유승민", "010-9761-9713"));
	insert(createUser(56, "조원진", "010-1234-5678"));
	insert(createUser(56, "조원진", "010-4568-2975"));

	printUserList();

	//검색 테스트
	User* res = get(44);
	printf("\n 해시테이블 검색결과 ========================== \n");
	if (res == NULL) printf("검색결과가 없음\n");
	else printf("%d \t %s \t %s \n", res->num, res->name, res->phone);

	//삭제 테스트
	unsigned char removed = delete_User(37);
	printf("\n 삭제결과:%s \n", removed ? "성공" : "실패");

	printUserList();

	printf("\n 프로그램 종료...\n");
	return 0;
}